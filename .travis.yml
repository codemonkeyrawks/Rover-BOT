# Build for Rover-BOT

# Setup Linux Distro
os: linux
arch: i386
dist: focal

# Lang: BASH
language: shell

# Deploy Wine and XOrg
before_install:
- sudo dpkg --add-architecture i386
- sudo apt-get update
- sudo apt-get install xvfb wine gcc-avr binutils-avr gdb-avr avr-libc -y
- Xvfb :0 -screen 0 1024x768x16 &

script:

# Store Main Branch Directory
- basedir="/home/travis/build/codemonkeyrawks/Rover-BOT"
- winepfx="err-all,warn-all,fixme-all,trace-all,relay-all wine"

# Build Basic Stamp Software for Linux
- wget https://www.parallax.com/sites/default/files/downloads/Setup-Stamp-Editor-v2.5.4.exe
- mv Setup-Stamp-Editor-v2.5.4.exe $basedir/Parallax/StampEditor.exe

# Bot & Joystick Controller
# Test Each Bot & Controller Revision (Basic Stamp Software)

# Revision 1
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_1/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_1/Control.BS2" >> "../Status.txt"

# Revision 2
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_2/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_2/Control.BS2" >> "../Status.txt"

# Revision 3
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_3/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_3/Control.BS2" >> "../Status.txt"

# Revision 4
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_4/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_4/Control.BS2" >> "../Status.txt"

# Revision 5
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_5/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_5/Control.BS2" >> "../Status.txt"

# Revision 6
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_6/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_6/Control.BS2" >> "../Status.txt"

# Revision 7
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_7/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_7/Control.BS2" >> "../Status.txt"

# Revision 8
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_8/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_8/Control.BS2" >> "../Status.txt"

# Revision 9
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_9/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_9/Control.BS2" >> "../Status.txt"

# Revision 10
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_10/Robot/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_10/Robot/Control.BS2" >> "../Status.txt"

# Revision 11
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_11/Robot/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_11/Robot/Control.BS2" >> "../Status.txt"

# Revision 12
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_12/Robot/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_12/Robot/Control.BS2" >> "../Status.txt"

# Revision 13
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_13/Robot/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_13/Robot/Control.BS2" >> "../Status.txt"

# Revision 14
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_14/Robot/Bot.BS2" >> "../Status.txt"
- DISPLAY=:0.0 WINEDEBUG=$winepfx wine "Parallax/StampEditor" /Tokenize "../Program Code/Rev_14/Robot/Control.BS2" >> "../Status.txt"

# =====================================
# Check BS2 Code: (Return Pass or Fail)
- if [ $(grep -c 'Tokenized' ../Status.txt) == "28" ]; then Output0="Passed"; else Output0="Failed"; fi
# =====================================

# Arm (Gripper Controller)
# Test Each Gripper Controller Revision (AVR-GCC)

# Revision 10
- avr-gcc -g -Os -mmcu=atmega8 -c "Program Code/Rev_10/Arm/main.c" -o "Program Code/Rev_10/Arm/main.o"
- avr-gcc -g -mmcu=atmega8 -o "Program Code/Rev_10/Arm/main.elf" "Program Code/Rev_10/Arm/main.o"
- avr-objcopy -j .text -j .data -O ihex "Program Code/Rev_10/Arm/main.elf" "Program Code/Rev_10/Arm/main.hex"

# Revision 11
- avr-gcc -g -Os -mmcu=atmega8 -c "Program Code/Rev_11/Arm/main.c" -o "Program Code/Rev_11/Arm/main.o" 
- avr-gcc -g -mmcu=atmega8 -o "Program Code/Rev_11/Arm/main.elf" "Program Code/Rev_11/Arm/main.o"
- avr-objcopy -j .text -j .data -O ihex "Program Code/Rev_11/Arm/main.elf" "Program Code/Rev_11/Arm/main.hex"

# Revision 12
- avr-gcc -g -Os -mmcu=atmega8 -c "Program Code/Rev_12/Arm/main.c" -o "Program Code/Rev_12/Arm/main.o" 
- avr-gcc -g -mmcu=atmega8 -o "Program Code/Rev_12/Arm/main.elf" "Program Code/Rev_12/Arm/main.o"
- avr-objcopy -j .text -j .data -O ihex "Program Code/Rev_12/Arm/main.elf" "Program Code/Rev_12/Arm/main.hex"

# Revision 13
- avr-gcc -g -Os -mmcu=atmega8 -c "Program Code/Rev_13/Arm/main.c" -o "Program Code/Rev_13/Arm/main.o" 
- avr-gcc -g -mmcu=atmega8 -o "Program Code/Rev_13/Arm/main.elf" "Program Code/Rev_13/Arm/main.o"
- avr-objcopy -j .text -j .data -O ihex "Program Code/Rev_13/Arm/main.elf" "Program Code/Rev_13/Arm/main.hex"

# Revision 14
- avr-gcc -g -Os -mmcu=atmega8 -c "Program Code/Rev_14/Arm/main.c" -o "Program Code/Rev_14/Arm/main.o" 
- avr-gcc -g -mmcu=atmega8 -o "Program Code/Rev_14/Arm/main.elf" "Program Code/Rev_14/Arm/main.o"
- avr-objcopy -j .text -j .data -O ihex "Program Code/Rev_14/Arm/main.elf" "Program Code/Rev_14/Arm/main.hex"

# =====================================
# Check AVR Code: (Return Pass or Fail)
# =====================================
- if [ -f "$basedir/Program Code/Rev_10/Arm/main.hex" ] &&
     [ -f "$basedir/Program Code/Rev_11/Arm/main.hex" ] &&
     [ -f "$basedir/Program Code/Rev_12/Arm/main.hex" ] &&
     [ -f "$basedir/Program Code/Rev_13/Arm/main.hex" ] &&
     [ -f "$basedir/Program Code/Rev_14/Arm/main.hex" ];
  then 
         Output1="Passed";
     else 
         Output1="Failed";
  fi

# ======================================
# Sets a Flag to Fail (On Broken Script)
# ======================================
- if [ "$Output0" == "Failed" ]; then exit 1; fi
- if [ "$Output1" == "Failed" ]; then exit 1; fi
